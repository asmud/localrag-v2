[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "localrag"
version = "0.1.0"
description = "Enterprise-grade local RAG system with knowledge graph integration"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "LocalRAG Team" },
]
keywords = ["rag", "llm", "knowledge-graph", "enterprise", "local"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "asyncpg>=0.29.0",
    "redis>=6.2.0",
    "neo4j>=5.15.0",
    "transformers>=4.38.0",
    "torch>=2.1.0",
    "sentence-transformers>=2.2.0",
    "markitdown[all]>=0.0.1a2",
    "numpy>=1.24.0",
    "python-multipart>=0.0.6",
    "click>=8.0.0",
    "loguru>=0.7.0",
    "pgvector>=0.4.1",
    "tensorflow>=2.18.1",
    "tf-keras>=2.18.0",
    "accelerate>=1.7.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "httpx>=0.25.0",
    # Enhanced OCR dependencies
    "easyocr>=1.7.0",
    "paddlepaddle>=2.6.0",
    "paddleocr>=2.7.0",
    "pytesseract>=0.3.10",
    "pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "pymupdf>=1.23.0",  # PDF page extraction and analysis
    # Task queue and background processing - using redis-py async support
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]
ocr-enhanced = [
    "easyocr>=1.7.0",
    "paddlepaddle>=2.6.0",
    "paddleocr>=2.7.0",
    "pytesseract>=0.3.10",
    "pillow>=10.0.0",
    "opencv-python>=4.8.0",
]

[project.urls]
Homepage = "https://github.com/localrag/localrag"
Repository = "https://github.com/localrag/localrag.git"
Documentation = "https://localrag.readthedocs.io"

[tool.hatch.build.targets.wheel]
packages = ["api", "core", "utils"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["api", "core", "utils"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]